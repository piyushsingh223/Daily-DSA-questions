Leetcode 3042. Count Prefix and Suffix Pairs I 

int countPrefixSuffixPairs(vector<string>& words) {
        int n=words.size();
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                string a=words[i];
                string temp=words[j];
                int ind1=temp.find(a);
                reverse(a.begin(),a.end());
                reverse(temp.begin(),temp.end());
                int ind2=temp.find(a);
                if(ind1==0 && ind2==0) ans++;
            }
        }
        return ans;
 }


GFG - Count the number of possible triangles

int countTriangles(vector<int>& arr) {
        // code here
        int n=arr.size(),ans=0;;
        sort(arr.begin(),arr.end());
        for(int i=n-1;i>=2;i--){
            int j=0,k=i-1;
            while(j<k){
                if(arr[j]+arr[k]>arr[i]){
                    ans+=(k-j);              // if arr[j]+arr[k]>arr[i] , this means that all the elements between j and k staisfy the condition because the array is sorted.
                    k--;
                } else j++;
            }
        }
        return ans;
 }


Leetcode 1138. Alphabet Board Path

 string alphabetBoardPath(string target) {
        unordered_map<char,pair<int,int>> m;
        int n=target.size();
        int startrow=0;
        int startcol=0;
        string ans="";
        for(int i=0;i<n;i++){
            int targetrow=(target[i]-'a')/5;     //most important part of question which is to find the row number and column number .
            int targetcol=(target[i]-'a')%5;
            if(target[i]=='z'){                 //we handle separate case for z as in this case we go columnwise first and then rowwise.
                while(startcol>targetcol){
                    startcol--;
                    ans+='L';
                }
                while(targetrow>startrow){
                    startrow++;
                    ans+='D';
                }
                ans+='!';
            } else{                        //apart from z , we go rowwise first and them columnwise.
                if(targetrow>startrow){
                    while(targetrow>startrow){
                        startrow++;
                        ans+='D';
                    }
                } else if(startrow>targetrow){
                    while(startrow>targetrow){
                        startrow--;
                        ans+='U';
                    }
                }

                if(targetcol>startcol){
                    while(targetcol>startcol){
                        startcol++;
                        ans+='R';
                    }
                } else if(startcol>targetcol){
                    while(startcol>targetcol){
                        startcol--;
                        ans+='L';
                    }
                }
                ans+='!';
            }
        }
        return ans;
}
