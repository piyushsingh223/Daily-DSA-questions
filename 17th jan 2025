2683. Neighboring Bitwise XOR :- 


bool doesValidArrayExist(vector<int>& derived) {
        int n=derived.size();
        if(n==1){
            if(derived[0]==0) return true;
            else return false;
        }
        vector<int> org(n,-1);
        if(derived[n-1]==0){
            org[n-1]=0;
            org[0]=0;
            for(int i=0;i<n-2;i++){
                if(derived[i]==0){
                    org[i+1]=org[i];
                } else{
                    if(org[i]==1) org[i+1]=0;
                    else org[i+1]=1;
                }
            }
            if(derived[n-2]==0){
                if(org[n-2]==org[n-1]) return true;
                else return false;
            } else{
                if(org[n-2]==org[n-1]) return false;
                else return true;
            }
        } else{
            org[n-1]=0;
            org[0]=1;
            for(int i=0;i<n-2;i++){
                if(derived[i]==0){
                    org[i+1]=org[i];
                } else{
                    if(org[i]==1) org[i+1]=0;
                    else org[i+1]=1;
                }
            }
            if(derived[n-2]==0){
                if(org[n-2]==org[n-1]) return true;
                else return false;
            } else{
                if(org[n-2]==org[n-1]) return false;
                else return true;
            }
        }
 }



GFG : Product array puzzle :- 


vector<int> productExceptSelf(vector<int>& arr) {
        // code here
        int zeroind,zerocnt=0;
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                zeroind=i;
                zerocnt++;
            }
        }
        int prod=1;
        for(auto x:arr){
            if(zerocnt!=1 || x!=0) prod*=x;
        }
        vector<int> ans(n);
        for(int i=0;i<n;i++){
            if(zerocnt>1) ans[i]=0;
            else if(zerocnt==1){
                if(i==zeroind) ans[i]=prod;
                else ans[i]=0;
            } else ans[i]=prod/arr[i];
        }
        return ans;
}


3133. Minimum Array End :-


//The first thing that comes to mind is that, for the AND of all numbers to remain x, every number in 
the array needs to include at least the same bits as x. This means that the numbers in the array must 
retain the bitwise characteristics of x as we move from one element to the next.
Now, the smallest valid number we can start with is x itself, since including anything smaller would 
lose the bit pattern that defines x. From there, we need to build up the next elements while keeping 
the numbers strictly increasing. The key idea is that as long as the new number has the same relevant 
bits as x, the AND result will remain unchanged.To achieve this, we take the current number and increment it.
But after incrementing, we force the new number to keep the bit pattern of x by applying a bitwise OR with x. 
This ensures that no bits from x are lost in the process, and we continue this until the last element is constructed.



long long minEnd(int n, int x) {
        long long start=x;
        n--;
        while(n--){
            start=((start+1)|x);
        }
        return start;
 }
