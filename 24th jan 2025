802. Find Eventual Safe States :- 


vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> outdegree(n,0);
        queue<int> q;
        for(int i=0;i<n;i++){
            outdegree[i]=graph[i].size();
            if(outdegree[i]==0) q.push(i);
        }
        vector<vector<int>> reversegraph(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].size();j++){
                reversegraph[graph[i][j]].push_back(i);
            }
        }
        vector<bool> res(n,false);
        while(!q.empty()){
            int temp=q.front();
            q.pop();
            res[temp]=true;
            for(auto x:reversegraph[temp]){
                outdegree[x]--;
                if(outdegree[x]==0) q.push(x);
            }
        }
        vector<int> ans;
        for(int i=0;i<n;i++){
            if(res[i]) ans.push_back(i);
        }
        return ans;
}



GFG :- Detect Loop in linked list :- 


bool detectLoop(Node* head) {
        // your code here
        if(head->next==NULL) return false;
        Node* slow=head;
        Node* fast=head;
        slow=slow->next;
        fast=fast->next->next;
        while(slow->next && fast->next && fast->next->next){
            if(slow==fast) return true;
            slow=slow->next;
            fast=fast->next->next;
        }
        return false;
}


1963. Minimum Number of Swaps to Make the String Balanced:- 

int minSwaps(string s) {
       int n=s.size();
       stack<char> st;
       int cnt=0;
       for(int i=0;i<n;i++){
          if(s[i]=='['){
            st.push(s[i]);
          } else{
            if(st.empty()) cnt++;
            else st.pop();
          }
       } 
       if(cnt%2==0) return cnt/2;
       else return (cnt/2)+1;
}
