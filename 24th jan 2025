802. Find Eventual Safe States :- 


vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> outdegree(n,0);
        queue<int> q;
        for(int i=0;i<n;i++){
            outdegree[i]=graph[i].size();
            if(outdegree[i]==0) q.push(i);
        }
        vector<vector<int>> reversegraph(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].size();j++){
                reversegraph[graph[i][j]].push_back(i);
            }
        }
        vector<bool> res(n,false);
        while(!q.empty()){
            int temp=q.front();
            q.pop();
            res[temp]=true;
            for(auto x:reversegraph[temp]){
                outdegree[x]--;
                if(outdegree[x]==0) q.push(x);
            }
        }
        vector<int> ans;
        for(int i=0;i<n;i++){
            if(res[i]) ans.push_back(i);
        }
        return ans;
}
